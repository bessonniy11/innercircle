import 'package:flutter/material.dart';
import 'package:zvonilka/features/auth/presentation/screens/splash_screen.dart';
import 'package:provider/provider.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Provider
import 'package:zvonilka/core/api/api_client.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ApiClient
import 'package:zvonilka/core/socket/socket_client.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SocketClient
import 'package:zvonilka/core/socket/call_socket_client.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CallSocketClient
import 'package:zvonilka/core/config/api_config.dart';
import 'package:zvonilka/core/services/auth_service.dart';
import 'package:zvonilka/core/services/webrtc_service.dart';
import 'package:zvonilka/core/services/call_notification_service.dart';
import 'package:permission_handler/permission_handler.dart'; 

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); 
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∫–∞–º–µ—Ä—ã
  await requestMicrophonePermissions();
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API
  ApiConfig.printCurrentConfig();
  runApp(const MyApp());
}

/// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∫–∞–º–µ—Ä—ã
Future<void> requestMicrophonePermissions() async {
  try {
    debugPrint('üîê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∫–∞–º–µ—Ä—ã...');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    Map<Permission, PermissionStatus> statuses = await [
      Permission.microphone,
      Permission.camera,
    ].request();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    if (statuses[Permission.microphone] == PermissionStatus.granted) {
      debugPrint('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω–æ');
    } else {
      debugPrint('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ù–ï –ø–æ–ª—É—á–µ–Ω–æ: ${statuses[Permission.microphone]}');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã
    if (statuses[Permission.camera] == PermissionStatus.granted) {
      debugPrint('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –ø–æ–ª—É—á–µ–Ω–æ');
    } else {
      debugPrint('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –ù–ï –ø–æ–ª—É—á–µ–Ω–æ: ${statuses[Permission.camera]}');
    }
    
    // –ï—Å–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (statuses[Permission.microphone] != PermissionStatus.granted) {
      debugPrint('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∑–≤–æ–Ω–∫–∏ –ù–ï –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!');
    }
    
  } catch (e) {
    debugPrint('ÔøΩÔøΩ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        Provider<ApiClient>(
          create: (_) => ApiClient(),
        ),
        Provider<SocketClient>(
          create: (_) => SocketClient(),
        ),
        Provider<CallSocketClient>(
          create: (_) => CallSocketClient(),
        ),
        Provider<AuthService>(
          create: (_) => AuthService(),
        ),
        ChangeNotifierProvider<WebRTCService>(
          create: (context) => WebRTCService(
            Provider.of<CallSocketClient>(context, listen: false),
          ),
        ),
        Provider<CallNotificationService>(
          create: (_) => CallNotificationService(),
        ),
      ],
      child: MaterialApp(
        title: '–ó–≤–æ–Ω–∏–ª–∫–∞',
        theme: ThemeData(
          colorScheme: ColorScheme.fromSeed(
            seedColor: const Color(0xFF4CAF50), // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –ª–æ–≥–æ—Ç–∏–ø–∞
            brightness: Brightness.light,
          ),
          useMaterial3: true,
          appBarTheme: const AppBarTheme(
            backgroundColor: Color(0xFF4CAF50),
            foregroundColor: Colors.white,
            elevation: 2,
          ),
          floatingActionButtonTheme: const FloatingActionButtonThemeData(
            backgroundColor: Color(0xFF4CAF50),
            foregroundColor: Colors.white,
          ),
          elevatedButtonTheme: ElevatedButtonThemeData(
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF4CAF50),
              foregroundColor: Colors.white,
            ),
          ),
        ),
        home: const SplashScreen(),
      ),
    );
  }
}
