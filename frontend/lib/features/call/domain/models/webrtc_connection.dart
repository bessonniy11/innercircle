import 'package:flutter/foundation.dart';

/// –ú–æ–¥–µ–ª—å WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
class WebRTCConnection {
  final String callId;
  final bool isConnected;
  final bool isMuted;
  final bool isSpeakerOn;
  final DateTime createdAt;

  const WebRTCConnection({
    required this.callId,
    this.isConnected = false,
    this.isMuted = false,
    this.isSpeakerOn = true,
    required this.createdAt,
  });

  /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  factory WebRTCConnection.create(String callId) {
    return WebRTCConnection(
      callId: callId,
      createdAt: DateTime.now(),
    );
  }

  /// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
  WebRTCConnection copyWith({
    String? callId,
    bool? isConnected,
    bool? isMuted,
    bool? isSpeakerOn,
    DateTime? createdAt,
  }) {
    return WebRTCConnection(
      callId: callId ?? this.callId,
      isConnected: isConnected ?? this.isConnected,
      isMuted: isMuted ?? this.isMuted,
      isSpeakerOn: isSpeakerOn ?? this.isSpeakerOn,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  WebRTCConnection toggleMute() {
    return copyWith(isMuted: !isMuted);
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∞
  WebRTCConnection toggleSpeaker() {
    return copyWith(isSpeakerOn: !isSpeakerOn);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  WebRTCConnection setConnected(bool connected) {
    return copyWith(isConnected: connected);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–æ—Ç–æ–≤–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  bool get isReadyForConnection => false;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  bool get canDisconnect => false;

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  Duration get duration {
    return DateTime.now().difference(createdAt);
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  Future<void> initializeWebRTC() async {
    if (kIsWeb) {
      debugPrint('üåê WebRTC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤–µ–±–µ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏');
      // –ù–∞ –≤–µ–±–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–≤–æ–Ω–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
    } else {
      debugPrint('üì± WebRTC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    }
  }

  /// –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  Future<void> startCall() async {
    if (kIsWeb) {
      debugPrint('üåê –ó–≤–æ–Ω–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞ –≤–µ–±–µ');
      // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    } else {
      debugPrint('üì± –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    }
  }

  /// –û—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫ —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  Future<void> answerCall() async {
    if (kIsWeb) {
      debugPrint('üåê –ó–≤–æ–Ω–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞ –≤–µ–±–µ');
      // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    } else {
      debugPrint('üì± –û—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    }
  }

  @override
  String toString() {
    return 'WebRTCConnection(callId: $callId, connected: $isConnected, muted: $isMuted, duration: ${duration.inSeconds}s)';
  }
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
class WebRTCConfig {
  /// STUN —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è NAT traversal
  static const List<Map<String, dynamic>> iceServers = [
    {
      'urls': [
        'stun:stun.l.google.com:19302',
        'stun:stun1.l.google.com:19302',
        'stun:stun2.l.google.com:19302',
      ],
    },
    // –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º TURN —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–µ—Ç–µ–π
    // {'urls': 'turn:your-turn-server.com:3478', 'username': 'username', 'credential': 'password'},
  ];

  /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è peer connection
  static const Map<String, dynamic> peerConnectionConfig = {
    'iceServers': iceServers,
    'iceCandidatePoolSize': 10,
    'bundlePolicy': 'balanced',
    'rtcpMuxPolicy': 'require',
    'iceTransportPolicy': 'all',
    'sdpSemantics': 'unifiedPlan',
  };

  /// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–æ–≤
  static const Map<String, dynamic> mediaConstraints = {
    'audio': true,
    'video': false, // –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏
  };

  /// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è offer
  static const Map<String, dynamic> offerOptions = {
    'offerToReceiveAudio': true,
    'offerToReceiveVideo': false,
    'voiceActivityDetection': true,
    'iceRestart': false,
  };

  /// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è answer
  static const Map<String, dynamic> answerOptions = {
    'voiceActivityDetection': true,
  };
}
