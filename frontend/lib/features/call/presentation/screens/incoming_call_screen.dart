import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../../core/services/webrtc_service.dart';
import 'active_call_screen.dart';

/// –≠–∫—Ä–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
class IncomingCallScreen extends StatefulWidget {
  final String callId;
  final String remoteUserId;
  final String callType;
  final String remoteUsername;

  const IncomingCallScreen({
    super.key,
    required this.callId,
    required this.remoteUserId,
    required this.callType,
    required this.remoteUsername,
  });

  @override
  State<IncomingCallScreen> createState() => _IncomingCallScreenState();
}

class _IncomingCallScreenState extends State<IncomingCallScreen> {
  late WebRTCService _webrtcService;
  bool _isProcessing = false;

  @override
  void initState() {
    super.initState();
    _webrtcService = Provider.of<WebRTCService>(context, listen: false);
  }

  /// –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  Future<void> _acceptCall() async {
    if (_isProcessing) return;
    
    setState(() {
      _isProcessing = true;
    });

    try {
      debugPrint('üîî IncomingCallScreen: –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ ${widget.callId}');
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ WebRTCService
      final success = await _webrtcService.acceptCall(
        widget.callId,
        widget.callType == 'video' ? CallType.video : CallType.audio, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∏–∑ widget
      );

      if (success) {
        debugPrint('üîî IncomingCallScreen: –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ');
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        if (mounted) {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => ActiveCallScreen(
                remoteUserId: widget.remoteUserId,
                remoteUsername: widget.remoteUsername, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–º—è
                callType: widget.callType == 'video' ? CallType.video : CallType.audio,
              ),
            ),
          );
        }
      } else {
        debugPrint('üî• IncomingCallScreen: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫')),
          );
        }
      }
    } catch (e) {
      debugPrint('üî• IncomingCallScreen: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isProcessing = false;
        });
      }
    }
  }

  /// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  Future<void> _rejectCall() async {
    if (_isProcessing) return;
    
    setState(() {
      _isProcessing = true;
    });

    try {
      debugPrint('üîî IncomingCallScreen: –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ ${widget.callId}');
      
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ WebRTCService
      _webrtcService.rejectCall(widget.callId);

      if (mounted) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
        Navigator.of(context).pop();
      }
    } catch (e) {
      debugPrint('üî• IncomingCallScreen: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isProcessing = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF4CAF50),
      body: SafeArea(
        child: Column(
          children: [
            // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–≤–æ–Ω–∫–µ
            Expanded(
              flex: 2,
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // –ê–≤–∞—Ç–∞—Ä –∑–≤–æ–Ω—è—â–µ–≥–æ
                    CircleAvatar(
                      radius: 60,
                      backgroundColor: Colors.white,
                      child: Text(
                        'U',
                        style: TextStyle(
                          fontSize: 48,
                          fontWeight: FontWeight.bold,
                          color: const Color(0xFF4CAF50),
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),

                    // –ò–º—è –∑–≤–æ–Ω—è—â–µ–≥–æ
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 24.0),
                      child: Text(
                        '–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç ${widget.remoteUsername}',
                        style: const TextStyle(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                    const SizedBox(height: 16),

                    // –¢–∏–ø –∑–≤–æ–Ω–∫–∞
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 24.0),
                      child: Text(
                        widget.callType == 'video' ? '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫' : '–ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫',
                        style: const TextStyle(
                          fontSize: 18,
                          color: Colors.white70,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ],
                ),
              ),
            ),

            // –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            Expanded(
              flex: 1,
              child: Container(
                padding: const EdgeInsets.all(32),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                    _buildControlButton(
                      icon: Icons.call_end,
                      color: Colors.red,
                      onPressed: _isProcessing ? null : _rejectCall,
                      label: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                    ),

                    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è
                    _buildControlButton(
                      icon: Icons.call,
                      color: Colors.green,
                      onPressed: _isProcessing ? null : _acceptCall,
                      label: '–ü—Ä–∏–Ω—è—Ç—å',
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  Widget _buildControlButton({
    required IconData icon,
    required Color color,
    required VoidCallback? onPressed,
    required String label,
  }) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: 80,
          height: 80,
          decoration: BoxDecoration(
            color: color,
            shape: BoxShape.circle,
            boxShadow: [
              BoxShadow(
                color: color.withOpacity(0.3),
                blurRadius: 20,
                spreadRadius: 5,
              ),
            ],
          ),
          child: IconButton(
            icon: Icon(icon, size: 40),
            color: Colors.white,
            onPressed: onPressed,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          label,
          style: const TextStyle(
            color: Colors.white,
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
      ],
    );
  }
}
