import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:zvonilka/core/services/auth_service.dart';
import 'package:zvonilka/core/config/api_config.dart';
import 'package:zvonilka/core/api/api_client.dart';
import 'package:zvonilka/core/socket/socket_client.dart';
import 'package:zvonilka/features/auth/presentation/screens/login_screen.dart';
import 'package:zvonilka/features/user/presentation/screens/user_profile_screen.dart';
import 'package:zvonilka/core/widgets/app_logo.dart';
import 'package:provider/provider.dart';

/// –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class SettingsScreen extends StatefulWidget {
  final String currentUserId;
  final String currentUsername;

  const SettingsScreen({
    super.key,
    required this.currentUserId,
    required this.currentUsername,
  });

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  late AuthService _authService;
  Map<String, dynamic>? _tokenData;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _initializeData();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _initializeData() async {
    try {
      _authService = await AuthService.getInstance();
      _tokenData = _authService.getCurrentUser();
      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      debugPrint('üî• Error initializing settings: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// Logout —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
  Future<void> _logout() async {
    try {
      final apiClient = Provider.of<ApiClient>(context, listen: false);
      final socketClient = Provider.of<SocketClient>(context, listen: false);

      // –û—Ç–∫–ª—é—á–∞–µ–º WebSocket –∏ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
      socketClient.clearToken();
      
      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤
      apiClient.removeAuthToken();
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await _authService.clearAuthData();
      
      debugPrint('üö™ Logout from settings successful');

      if (mounted) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        Navigator.pushAndRemoveUntil(
          context,
          MaterialPageRoute(builder: (context) => const LoginScreen()),
          (route) => false, // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–∫—Ä–∞–Ω—ã
        );
      }
    } catch (e) {
      debugPrint('üî• Logout error: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')),
        );
      }
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è logout
  void _showLogoutDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?'),
          content: Text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ "${widget.currentUsername}"?'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
              },
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                _logout(); // –í—ã—Ö–æ–¥–∏–º
              },
              style: TextButton.styleFrom(
                foregroundColor: Colors.red,
              ),
              child: const Text('–í—ã–π—Ç–∏'),
            ),
          ],
        );
      },
    );
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  void _showAboutDialog() {
    showAboutDialog(
      context: context,
      applicationName: '–ó–≤–æ–Ω–∏–ª–∫–∞',
      applicationVersion: '1.0.0',
      applicationIcon: const AppLogo(size: 60),
      children: [
        const Text('–°–µ–º–µ–π–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º–∏.'),
        const SizedBox(height: 16),
        Text('Backend: ${ApiConfig.currentBackendUrl}'),
        Text('–†–µ–∂–∏–º: ${ApiConfig.isDevelopment ? "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞" : "–ü—Ä–æ–¥–∞–∫—à–Ω"}'),
      ],
    );
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  void _showTechnicalInfo() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                _buildInfoRow('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', widget.currentUsername),
                _buildInfoRow('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', widget.currentUserId),
                _buildInfoRow('Backend URL', ApiConfig.currentBackendUrl),
                _buildInfoRow('–†–µ–∂–∏–º', ApiConfig.isDevelopment ? "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞" : "–ü—Ä–æ–¥–∞–∫—à–Ω"),
                _buildInfoRow('Debug Mode', kDebugMode.toString()),
                const Divider(),
                if (_tokenData != null) ...[
                  const Text('–î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞:', style: TextStyle(fontWeight: FontWeight.bold)),
                  const SizedBox(height: 8),
                  ..._tokenData!.entries.map((entry) => 
                    _buildInfoRow(entry.key, entry.value.toString())
                  ),
                ],
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
            ),
          ],
        );
      },
    );
  }

  /// –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 100,
            child: Text(
              '$label:',
              style: const TextStyle(
                fontWeight: FontWeight.w500,
                color: Colors.grey,
              ),
            ),
          ),
          Expanded(
            child: SelectableText(
              value,
              style: const TextStyle(
                fontFamily: 'monospace',
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        centerTitle: true,
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          Card(
            elevation: 2,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  CircleAvatar(
                    radius: 40,
                    backgroundColor: Theme.of(context).primaryColor,
                    child: Text(
                      widget.currentUsername.isNotEmpty 
                          ? widget.currentUsername[0].toUpperCase()
                          : '?',
                      style: const TextStyle(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  Text(
                    widget.currentUsername,
                    style: const TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'ID: ${widget.currentUserId}',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[600],
                      fontFamily: 'monospace',
                    ),
                  ),
                ],
              ),
            ),
          ),

          const SizedBox(height: 24),

          // –°–µ–∫—Ü–∏—è: –ê–∫–∫–∞—É–Ω—Ç
          const Text(
            '–ê–∫–∫–∞—É–Ω—Ç',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.grey,
            ),
          ),
          const SizedBox(height: 8),
          
          Card(
            elevation: 1,
            child: Column(
              children: [
                ListTile(
                  leading: const Icon(Icons.person_outline),
                  title: const Text('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
                  subtitle: const Text('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ'),
                  trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => UserProfileScreen(
                          currentUserId: widget.currentUserId,
                          currentUsername: widget.currentUsername,
                        ),
                      ),
                    );
                  },
                ),
                const Divider(height: 1),
                ListTile(
                  leading: const Icon(Icons.lock_outline),
                  title: const Text('–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'),
                  subtitle: const Text('–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞'),
                  trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                  onTap: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')),
                    );
                  },
                ),
              ],
            ),
          ),

          const SizedBox(height: 24),

          // –°–µ–∫—Ü–∏—è: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          const Text(
            '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.grey,
            ),
          ),
          const SizedBox(height: 8),
          
          Card(
            elevation: 1,
            child: Column(
              children: [
                ListTile(
                  leading: const Icon(Icons.notifications),
                  title: const Text('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
                  subtitle: const Text('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
                  trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                  onTap: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')),
                    );
                  },
                ),
                const Divider(height: 1),
                ListTile(
                  leading: const Icon(Icons.color_lens_outlined),
                  title: const Text('–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'),
                  subtitle: const Text('–°–≤–µ—Ç–ª–∞—è, —Ç—ë–º–Ω–∞—è –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–∞—è'),
                  trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                  onTap: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('–°–º–µ–Ω–∞ —Ç–µ–º—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')),
                    );
                  },
                ),
                const Divider(height: 1),
                ListTile(
                  leading: const Icon(Icons.language_outlined),
                  title: const Text('–Ø–∑—ã–∫'),
                  subtitle: const Text('–†—É—Å—Å–∫–∏–π'),
                  trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                  onTap: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')),
                    );
                  },
                ),
              ],
            ),
          ),

          const SizedBox(height: 24),

          // –°–µ–∫—Ü–∏—è: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          const Text(
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.grey,
            ),
          ),
          const SizedBox(height: 8),
          
          Card(
            elevation: 1,
            child: Column(
              children: [
                ListTile(
                  leading: const Icon(Icons.info_outline),
                  title: const Text('–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏'),
                  subtitle: const Text('–í–µ—Ä—Å–∏—è, –ª–∏—Ü–µ–Ω–∑–∏—è, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏'),
                  trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                  onTap: _showAboutDialog,
                ),
                const Divider(height: 1),
                ListTile(
                  leading: const Icon(Icons.bug_report_outlined),
                  title: const Text('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
                  subtitle: const Text('–î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏'),
                  trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                  onTap: _showTechnicalInfo,
                ),
                const Divider(height: 1),
                ListTile(
                  leading: const Icon(Icons.help_outline),
                  title: const Text('–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞'),
                  subtitle: const Text('FAQ, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'),
                  trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                  onTap: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')),
                    );
                  },
                ),
              ],
            ),
          ),

          const SizedBox(height: 32),

          // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
          SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              onPressed: _showLogoutDialog,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.logout, size: 20),
                  SizedBox(width: 8),
                  Text(
                    '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
            ),
          ),

          const SizedBox(height: 16),

          // –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          Center(
            child: Text(
              '–ó–≤–æ–Ω–∏–ª–∫–∞ v1.0.0\n${ApiConfig.isDevelopment ? "Development Mode" : "Production Mode"}',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey[500],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
