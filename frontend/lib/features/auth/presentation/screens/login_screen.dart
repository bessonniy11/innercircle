import 'package:flutter/material.dart';
import 'package:zvonilka/features/auth/presentation/screens/registration_screen.dart';
import 'package:zvonilka/features/chat/presentation/screens/chat_list_screen.dart';
import 'package:zvonilka/core/api/api_client.dart';
import 'package:zvonilka/core/socket/socket_client.dart';
import 'package:zvonilka/core/socket/call_socket_client.dart';
import 'package:zvonilka/core/services/auth_service.dart';
import 'package:zvonilka/core/widgets/app_logo.dart';

import 'package:provider/provider.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  @override
  void dispose() {
    _usernameController.dispose();
    _passwordController.dispose();
    // TODO: Dispose _socketClient if it has a dispose method or close connection
    super.dispose();
  }

  void _login() async {
    final String username = _usernameController.text;
    final String password = _passwordController.text;

    try {
      final apiClient = Provider.of<ApiClient>(context, listen: false);
      final socketClient = Provider.of<SocketClient>(context, listen: false);
      final callSocketClient = Provider.of<CallSocketClient>(context, listen: false);
      final authService = await AuthService.getInstance();

      final response = await apiClient.dio.post('/auth/login', data: {'username': username, 'password': password});
      final String accessToken = response.data['access_token'];
      final String refreshToken = response.data['refresh_token'];
      
      // Decode JWT to get user data
      final Map<String, dynamic> decodedToken = apiClient.decodeJwtToken(accessToken);
      final String currentUserId = decodedToken['sub']; // 'sub' is typically the user ID
      final String currentUsername = decodedToken['username']; // 'username' is typically the username

      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è persistent login
      await authService.saveAuthData(
        accessToken: accessToken,
        refreshToken: refreshToken,
        userId: currentUserId,
        username: currentUsername,
      );

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
      apiClient.setAuthToken(accessToken);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ–∫–µ—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
      debugPrint('üîî LoginScreen: –ü–æ–¥–∫–ª—é—á–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ–∫–µ—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π...');
      socketClient.setToken(accessToken);
      socketClient.connect();
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
      debugPrint('üîî LoginScreen: –ü–æ–¥–∫–ª—é—á–∞—é —Å–æ–∫–µ—Ç –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤...');
      callSocketClient.connect(accessToken);
      debugPrint('üîî LoginScreen: –í—ã–∑–æ–≤ callSocketClient.connect() –∑–∞–≤–µ—Ä—à–µ–Ω');

      debugPrint('üéâ Login successful: $currentUsername');
      debugPrint('üîî –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–æ–∫–µ—Ç–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–≤–æ–Ω–∫–æ–≤');

      // Navigate to chat list screen after successful login
      if (mounted) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => ChatListScreen(
              currentUserId: currentUserId,
              currentUsername: currentUsername,
            ),
          ),
        );
      }
    } catch (e) {
      debugPrint('üî• Login error: $e');
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ SnackBar
      final apiClient = Provider.of<ApiClient>(context, listen: false);
      final baseUrl = apiClient.dio.options.baseUrl;
      final fullUrl = '$baseUrl/auth/login';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      String errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:\n';
      errorMessage += 'URL: $fullUrl\n';
      errorMessage += 'Username: $username\n';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
      if (e.toString().contains('SocketException')) {
        errorMessage += '–û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é\n';
        errorMessage += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
      } else if (e.toString().contains('DioException')) {
        errorMessage += '–û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å HTTP –∑–∞–ø—Ä–æ—Å–æ–º\n';
        errorMessage += '–î–µ—Ç–∞–ª–∏: ${e.toString()}';
      } else {
        errorMessage += '–û—à–∏–±–∫–∞: ${e.toString()}';
      }

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              errorMessage,
              style: const TextStyle(fontSize: 12),
            ),
            duration: const Duration(seconds: 10), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞
            backgroundColor: Colors.red,
            action: SnackBarAction(
              label: '–°–∫—Ä—ã—Ç—å',
              textColor: Colors.white,
              onPressed: () {
                ScaffoldMessenger.of(context).hideCurrentSnackBar();
              },
            ),
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–í—Ö–æ–¥ –≤ –ó–≤–æ–Ω–∏–ª–∫—É'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // –õ–æ–≥–æ—Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const AppLogo(
              size: 120,
              showTitle: true,
            ),
            const SizedBox(height: 48.0),
            TextField(
              controller: _usernameController,
              decoration: const InputDecoration(
                labelText: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16.0),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(
                labelText: '–ü–∞—Ä–æ–ª—å',
                border: OutlineInputBorder(),
              ),
              obscureText: true,
            ),
            const SizedBox(height: 24.0),
            ElevatedButton(
              onPressed: _login,
              style: ElevatedButton.styleFrom(
                minimumSize: const Size(double.infinity, 50), // full width button
              ),
              child: const Text('–í–æ–π—Ç–∏'),
            ),
            const SizedBox(height: 16.0),
            TextButton(
              onPressed: () {
                Navigator.push(context, MaterialPageRoute(builder: (context) => const RegistrationScreen()));
              },
              child: const Text('–£ –º–µ–Ω—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'),
            ),
          ],
        ),
      ),
    );
  }
} 