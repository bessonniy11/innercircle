import 'package:flutter/material.dart';
import 'package:zvonilka/core/services/auth_service.dart';
import 'package:zvonilka/core/api/api_client.dart';
import 'package:zvonilka/core/socket/socket_client.dart';
import 'package:zvonilka/features/auth/presentation/screens/login_screen.dart';
import 'package:zvonilka/features/chat/presentation/screens/chat_list_screen.dart';
import 'package:zvonilka/core/widgets/app_logo.dart';
import 'package:provider/provider.dart';

/// –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  @override
  void initState() {
    super.initState();
    _checkAuthStatus();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  Future<void> _checkAuthStatus() async {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º splash screen –º–∏–Ω–∏–º—É–º 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ª—É—á—à–µ–≥–æ UX
      await Future.delayed(const Duration(milliseconds: 1500));

      final authService = await AuthService.getInstance();
      authService.printCurrentState();

      if (!mounted) return;

      if (authService.isAuthenticated) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–∞—Ç–∞–º
        await _setupAuthenticatedUser(authService);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –≤—Ö–æ–¥–∞
        _navigateToLogin();
      }
    } catch (e) {
      debugPrint('üî• Error during auth check: $e');
      if (mounted) {
        _navigateToLogin();
      }
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _setupAuthenticatedUser(AuthService authService) async {
    try {
      final apiClient = Provider.of<ApiClient>(context, listen: false);
      final socketClient = Provider.of<SocketClient>(context, listen: false);

      final token = authService.getToken()!;
      final userId = authService.getUserId()!;
      final username = authService.getUsername()!;

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
      apiClient.setAuthToken(token);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Socket –∫–ª–∏–µ–Ω—Ç
      socketClient.setToken(token);
      socketClient.connect();

      debugPrint('üéâ Auto-login successful for user: $username');

      if (mounted) {
        _navigateToChatList(userId, username);
      }
    } catch (e) {
      debugPrint('üî• Error setting up authenticated user: $e');
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–æ–≥–∏–Ω—É
      await authService.clearAuthData();
      if (mounted) {
        _navigateToLogin();
      }
    }
  }

  /// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –≤—Ö–æ–¥–∞
  void _navigateToLogin() {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => const LoginScreen()),
    );
  }

  /// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤
  void _navigateToChatList(String userId, String username) {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => ChatListScreen(
          currentUserId: userId,
          currentUsername: username,
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF4CAF50), // –§–∏—Ä–º–µ–Ω–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // –õ–æ–≥–æ—Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const AppLogo(size: 120),
            
            const SizedBox(height: 40),
            
            // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const Text(
              '–ó–≤–æ–Ω–∏–ª–∫–∞',
              style: TextStyle(
                fontSize: 32,
                fontWeight: FontWeight.bold,
                color: Colors.white,
                letterSpacing: 1.2,
              ),
            ),
            
            const SizedBox(height: 16),
            
            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            const Text(
              '–°–µ–º–µ–π–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä',
              style: TextStyle(
                fontSize: 16,
                color: Colors.white70,
                fontWeight: FontWeight.w300,
              ),
            ),
            
            const SizedBox(height: 60),
            
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const SizedBox(
              width: 40,
              height: 40,
              child: CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                strokeWidth: 3,
              ),
            ),
            
            const SizedBox(height: 20),
            
            // –¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            const Text(
              '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...',
              style: TextStyle(
                fontSize: 14,
                color: Colors.white70,
                fontWeight: FontWeight.w400,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
