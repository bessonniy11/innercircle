import 'package:flutter/material.dart';

import 'package:provider/provider.dart';
import 'package:zvonilka/core/api/api_client.dart';
import 'package:zvonilka/features/auth/domain/models/user_public_model.dart';
import 'package:zvonilka/features/chat/presentation/screens/message_screen.dart';
import 'package:zvonilka/core/socket/socket_client.dart';

import 'package:zvonilka/core/services/webrtc_service.dart' as webrtc;
import 'package:zvonilka/core/socket/call_socket_client.dart';
import 'package:zvonilka/features/call/presentation/screens/active_call_screen.dart';

/**
 * –≠–∫—Ä–∞–Ω —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ,
 * –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏.
 *
 * –í MVP –≤–µ—Ä—Å–∏–∏, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω. –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å
 * —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω.
 *
 * @author –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç + Bessonniy
 * @since 1.0.0
 */
class UserListScreen extends StatefulWidget {
  final String currentUserId;
  final String currentUsername;

  const UserListScreen({super.key, required this.currentUserId, required this.currentUsername});

  @override
  State<UserListScreen> createState() => _UserListScreenState();
}

class _UserListScreenState extends State<UserListScreen> {
  late Future<List<UserPublicDto>> _usersFuture;

  @override
  void initState() {
    super.initState();
    _usersFuture = _fetchUsers();
  }

  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±—ç–∫–µ–Ω–¥–∞.
   *
   * –ò—Å–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –±—ç–∫–µ–Ω–¥–æ–º.
   * @returns Future<List<UserPublicDto>> –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
   * @throws Exception –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
   */
  Future<List<UserPublicDto>> _fetchUsers() async {
    try {
      final apiClient = Provider.of<ApiClient>(context, listen: false);
      final response = await apiClient.get('/users');
      if (response.statusCode == 200) {
        final List<dynamic> userData = response.data;
        return userData.map((json) => UserPublicDto.fromJson(json)).toList();
      } else {
        throw Exception('Failed to load users: ${response.statusCode}');
      }
    } catch (e) {
      print('Error fetching users: $e');
      throw Exception('Failed to load users: $e');
    }
  }

  /// –ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  Future<void> _startCall(UserPublicDto user) async {
    try {
      debugPrint('üîî UserListScreen: –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫ –∫ ${user.username}');
      
      // –ü–æ–ª—É—á–∞–µ–º WebRTCService –∏ CallSocketClient
      final webrtcService = Provider.of<webrtc.WebRTCService>(context, listen: false);
      final callSocketClient = Provider.of<CallSocketClient>(context, listen: false);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∫–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (!callSocketClient.isConnected) {
        debugPrint('üî• UserListScreen: CallSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∑–≤–æ–Ω–∫–æ–≤')),
        );
        return;
      }
      
                         // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∞—É–¥–∏–æ –∑–≤–æ–Ω–æ–∫
                   final success = await webrtcService.initiateCall(
                     user.id, 
                     webrtc.CallType.audio,
                     callerUsername: widget.currentUsername,
                   );
      
      if (success) {
        debugPrint('üîî UserListScreen: –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–ó–≤–æ–Ω–æ–∫ –∫ ${user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω')),
        );
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–∫—Ä–∞–Ω—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => ActiveCallScreen(
              remoteUserId: user.id,
              remoteUsername: user.username,
              callType: webrtc.CallType.audio,
            ),
          ),
        );
      } else {
        debugPrint('üî• UserListScreen: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫');
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫')),
        );
      }
      
    } catch (e) {
      debugPrint('üî• UserListScreen: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞: ${e.toString()}')),
      );
    }
  }

  /// –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  Future<void> _openChat(UserPublicDto user) async {
    try {
      final apiClient = Provider.of<ApiClient>(context, listen: false);
      final socketClient = Provider.of<SocketClient>(context, listen: false);
      final response = await apiClient.post('/chats/private', data: { 'targetUserId': user.id });

      if (response.statusCode == 201 || response.statusCode == 200) {
        final chatData = response.data;
        final String chatId = chatData['id'];
        final String chatName = chatData['name'];

        if (!mounted) return;
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => MessageScreen(
              chatId: chatId,
              chatName: chatName,
              apiClient: apiClient,
              socketClient: socketClient,
              currentUserId: widget.currentUserId,
              currentUsername: widget.currentUsername,
            ),
          ),
        );
      } else {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ —á–∞—Ç: ${response.statusCode}')),
        );
      }
    } catch (e) {
      print('Error creating/finding chat: $e');
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–∏—Å–∫–µ —á–∞—Ç–∞: ${e.toString()}')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –°–µ–º—å–∏'),
      ),
      body: FutureBuilder<List<UserPublicDto>>(
        future: _usersFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('–û—à–∏–±–∫–∞: ${snapshot.error}'));
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Center(child: Text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'));
          } else {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                final user = snapshot.data![index];
                return Card(
                  margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  elevation: 2,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                  child: ListTile(
                    leading: CircleAvatar(
                      backgroundColor: Theme.of(context).secondaryHeaderColor,
                      child: Text(user.username[0].toUpperCase()),
                    ),
                    title: Text(user.username, style: const TextStyle(fontWeight: FontWeight.bold)),
                    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω
                    // subtitle: Text(user.isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω'),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        // –ö–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∫–∞
                        IconButton(
                          icon: const Icon(Icons.call, color: Colors.green),
                          onPressed: () => _startCall(user),
                          tooltip: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å',
                        ),
                        // –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞
                        IconButton(
                          icon: const Icon(Icons.chat, color: Colors.blue),
                          onPressed: () => _openChat(user),
                          tooltip: '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                        ),
                      ],
                    ),
                    onTap: () => _openChat(user),
                  ),
                );
              },
            );
          }
        },
      ),
    );
  }
}
