import 'package:flutter/material.dart';
import 'webrtc_service.dart';
import '../../features/call/presentation/screens/incoming_call_screen.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö
class CallNotificationService {
  static final CallNotificationService _instance = CallNotificationService._internal();
  factory CallNotificationService() => _instance;
  CallNotificationService._internal();

  BuildContext? _context;
  final Map<String, BuildContext> _contexts = {};

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  void setContext(BuildContext context) {
    _context = context;
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  void addContext(String screenId, BuildContext context) {
    _contexts[screenId] = context;
    debugPrint('üîî CallNotificationService: –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∞: $screenId');
  }

  /// –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  void removeContext(String screenId) {
    _contexts.remove(screenId);
    debugPrint('üîî CallNotificationService: –£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∞: $screenId');
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  void showIncomingCall(Map<String, dynamic> callData) {
    debugPrint('üîî CallNotificationService: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞');
    debugPrint('üîî CallNotificationService: –î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞: $callData');
    
    final callId = callData['callId'] as String?;
    final remoteUserId = callData['remoteUserId'] as String?;
    final callType = callData['callType'] as String?;
    final remoteUsername = callData['remoteUsername'] as String?;
    
    debugPrint('üîî CallNotificationService: callId: $callId, remoteUserId: $remoteUserId, callType: $callType, remoteUsername: $remoteUsername');

    if (callId == null || remoteUserId == null || callType == null) {
      debugPrint('üî• CallNotificationService: –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞: $callData');
      return;
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    BuildContext? activeContext = _context;
    
    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∏—â–µ–º –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
    if (activeContext == null || !activeContext.mounted) {
      for (final context in _contexts.values) {
        if (context.mounted) {
          activeContext = context;
          break;
        }
      }
    }

    if (activeContext != null && activeContext!.mounted) {
      debugPrint('üîî CallNotificationService: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ IncomingCallScreen');
      Navigator.of(activeContext!).push(
        MaterialPageRoute(
          builder: (context) => IncomingCallScreen(
            callId: callId,
            remoteUserId: remoteUserId,
            callType: callType,
            remoteUsername: remoteUsername ?? 'Unknown User',
          ),
        ),
      );
      debugPrint('üîî CallNotificationService: IncomingCallScreen –ø–æ–∫–∞–∑–∞–Ω');
    } else {
      debugPrint('‚ö†Ô∏è CallNotificationService: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å WebRTCService
  void initializeWithWebRTCService(WebRTCService webrtcService, BuildContext context) {
    debugPrint('üîî CallNotificationService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å WebRTCService');
    setContext(context);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –≤ WebRTCService
    webrtcService.setIncomingCallCallback(showIncomingCall);
  }
}
