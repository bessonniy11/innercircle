import 'package:shared_preferences/shared_preferences.dart';
import 'package:jwt_decoder/jwt_decoder.dart';
import 'package:flutter/foundation.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —Ç–æ–∫–µ–Ω–∞–º–∏
class AuthService {
  static const String _tokenKey = 'auth_token';
  static const String _userIdKey = 'user_id';
  static const String _usernameKey = 'username';

  static AuthService? _instance;
  SharedPreferences? _prefs;

  AuthService._();

  /// Singleton instance
  static Future<AuthService> getInstance() async {
    _instance ??= AuthService._();
    _instance!._prefs ??= await SharedPreferences.getInstance();
    return _instance!;
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
  Future<void> saveAuthData({
    required String token,
    required String userId,
    required String username,
  }) async {
    await _prefs!.setString(_tokenKey, token);
    await _prefs!.setString(_userIdKey, userId);
    await _prefs!.setString(_usernameKey, username);
    
    debugPrint('üîê Auth data saved: user=$username, id=$userId');
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
  String? getToken() {
    return _prefs!.getString(_tokenKey);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String? getUserId() {
    return _prefs!.getString(_userIdKey);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å username —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String? getUsername() {
    return _prefs!.getString(_usernameKey);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
  bool hasValidToken() {
    final token = getToken();
    if (token == null) {
      debugPrint('üîê No token found');
      return false;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫
      bool isExpired = JwtDecoder.isExpired(token);
      if (isExpired) {
        debugPrint('üîê Token expired, clearing auth data');
        clearAuthData();
        return false;
      }

      debugPrint('üîê Valid token found for user: ${getUsername()}');
      return true;
    } catch (e) {
      debugPrint('üîê Invalid token format: $e');
      clearAuthData();
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
  Map<String, dynamic>? getTokenData() {
    final token = getToken();
    if (token == null) return null;

    try {
      return JwtDecoder.decode(token);
    } catch (e) {
      debugPrint('üîê Failed to decode token: $e');
      return null;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (logout)
  Future<void> clearAuthData() async {
    await _prefs!.remove(_tokenKey);
    await _prefs!.remove(_userIdKey);
    await _prefs!.remove(_usernameKey);
    
    debugPrint('üîê Auth data cleared');
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  bool get isAuthenticated => hasValidToken();

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  Map<String, String?> getCurrentUser() {
    return {
      'id': getUserId(),
      'username': getUsername(),
      'token': getToken(),
    };
  }

  /// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  void printCurrentState() {
    final user = getCurrentUser();
    debugPrint('üîê Auth State:');
    debugPrint('  - Authenticated: $isAuthenticated');
    debugPrint('  - Username: ${user['username']}');
    debugPrint('  - User ID: ${user['id']}');
    debugPrint('  - Has Token: ${user['token'] != null}');
  }
}
