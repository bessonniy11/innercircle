import 'package:shared_preferences/shared_preferences.dart';
import 'package:jwt_decoder/jwt_decoder.dart';
import 'package:flutter/foundation.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —Ç–æ–∫–µ–Ω–∞–º–∏
class AuthService {
  static const String _accessTokenKey = 'access_token';
  static const String _refreshTokenKey = 'refresh_token';
  static const String _userIdKey = 'user_id';
  static const String _usernameKey = 'username';

  static AuthService? _instance;
  SharedPreferences? _prefs;

  AuthService._();

  /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è Provider
  AuthService() {
    _initPrefs();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SharedPreferences
  Future<void> _initPrefs() async {
    _prefs ??= await SharedPreferences.getInstance();
  }

  /// Singleton instance
  static Future<AuthService> getInstance() async {
    _instance ??= AuthService._();
    _instance!._prefs ??= await SharedPreferences.getInstance();
    return _instance!;
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> saveAuthData({
    required String accessToken,
    required String refreshToken,
    required String userId,
    required String username,
  }) async {
    await _initPrefs();
    await _prefs!.setString(_accessTokenKey, accessToken);
    await _prefs!.setString(_refreshTokenKey, refreshToken);
    await _prefs!.setString(_userIdKey, userId);
    await _prefs!.setString(_usernameKey, username);
    
    debugPrint('üîê Auth data saved: user=$username, id=$userId');
  }

  /// –ü–æ–ª—É—á–∏—Ç—å Access Token
  Future<String?> getAccessToken() async {
    await _initPrefs();
    return _prefs!.getString(_accessTokenKey);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å Refresh Token
  Future<String?> getRefreshToken() async {
    await _initPrefs();
    return _prefs!.getString(_refreshTokenKey);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π Access Token
  Future<bool> hasValidAccessToken() async {
    final token = await getAccessToken();
    if (token == null) {
      debugPrint('üîê No access token found');
      return false;
    }

    try {
      bool isExpired = JwtDecoder.isExpired(token);
      if (isExpired) {
        debugPrint('üîê Access token expired');
        return false;
      }

      debugPrint('üîê Valid access token found for user: ${await getUsername()}');
      return true;
    } catch (e) {
      debugPrint('üîê Invalid access token format: $e');
      return false;
    }
  }

  Future<String?> getUsername() async {
    await _initPrefs();
    return _prefs!.getString(_usernameKey);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π Refresh Token
  Future<bool> hasValidRefreshToken() async {
    final token = await getRefreshToken();
    if (token == null) {
      debugPrint('üîê No refresh token found');
      return false;
    }

    try {
      bool isExpired = JwtDecoder.isExpired(token);
      if (isExpired) {
        debugPrint('üîê Refresh token expired');
        return false;
      }

      return true;
    } catch (e) {
      debugPrint('üîê Invalid refresh token format: $e');
      return false;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<void> clearAuthData() async {
    await _initPrefs();
    await _prefs!.remove(_accessTokenKey);
    await _prefs!.remove(_refreshTokenKey);
    await _prefs!.remove(_userIdKey);
    await _prefs!.remove(_usernameKey);
    
    debugPrint('üîê Auth data cleared');
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  Future<bool> get isAuthenticated async {
    final hasAccess = await hasValidAccessToken();
    final hasRefresh = await hasValidRefreshToken();
    return hasAccess || hasRefresh;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  Future<Map<String, String?>> getCurrentUser() async {
    await _initPrefs();
    return {
      'id': _prefs!.getString(_userIdKey),
      'username': _prefs!.getString(_usernameKey),
      'access_token': _prefs!.getString(_accessTokenKey),
      'refresh_token': _prefs!.getString(_refreshTokenKey),
    };
  }

  Future<String?> getUserId() async {
    await _initPrefs();
    return _prefs!.getString(_userIdKey);
  }

  /// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  Future<void> printCurrentState() async {
    final user = await getCurrentUser();
    final isAuth = await isAuthenticated;
    debugPrint('üîê Auth State:');
    debugPrint('  - Authenticated: $isAuth');
    debugPrint('  - Username: ${user['username']}');
    debugPrint('  - User ID: ${user['id']}');
    debugPrint('  - Has Access Token: ${user['access_token'] != null}');
    debugPrint('  - Has Refresh Token: ${user['refresh_token'] != null}');
    debugPrint('  - Access Token Valid: ${await hasValidAccessToken()}');
    debugPrint('  - Refresh Token Valid: ${await hasValidRefreshToken()}');
  }
}
