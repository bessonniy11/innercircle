import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart';
import 'package:permission_handler/permission_handler.dart';
import '../socket/call_socket_client.dart';

enum CallState {
  idle,
  calling,
  incoming,
  connected,
  ended,
  error,
}

enum CallType {
  audio,
  video,
}

class WebRTCService extends ChangeNotifier {
  final CallSocketClient _callSocketClient;
  
  // WebRTC –æ–±—ä–µ–∫—Ç—ã
  RTCPeerConnection? _peerConnection;
  MediaStream? _localStream;
  MediaStream? _remoteStream;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  CallState _callState = CallState.idle;
  CallType _callType = CallType.audio;
  String? _currentCallId;
  String? _remoteUserId;
  String? _remoteUsername; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  // –¢–∞–π–º–µ—Ä—ã
  Timer? _callTimer;
  Timer? _iceGatheringTimer;
  
  // Callback –¥–ª—è UI
  Function(Map<String, dynamic>)? _onIncomingCall;
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC
  final Map<String, dynamic> _rtcConfiguration = {
    'iceServers': [
      {'urls': 'stun:stun.l.google.com:19302'},
      {'urls': 'stun:stun1.l.google.com:19302'},
    ],
    'iceCandidatePoolSize': 10,
  };

  WebRTCService(this._callSocketClient) {
    _setupSocketListeners();
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã
  CallState get callState => _callState;
  CallType get callType => _callType;
  String? get currentCallId => _currentCallId;
  String? get remoteUserId => _remoteUserId;
  String? get remoteUsername => _remoteUsername;
  MediaStream? get localStream => _localStream;
  MediaStream? get remoteStream => _remoteStream;
  RTCPeerConnection? get peerConnection => _peerConnection;
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è UI
  void setIncomingCallCallback(Function(Map<String, dynamic>) callback) {
    _onIncomingCall = callback;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–∫–µ—Ç–æ–≤
  void _setupSocketListeners() {
    _callSocketClient.on('incoming_call', _handleIncomingCall);
    _callSocketClient.on('call_accepted', _handleCallAccepted);
    _callSocketClient.on('call_rejected', _handleCallRejected);
    _callSocketClient.on('call_ended', _handleCallEnded);
    _callSocketClient.on('ice_candidate', _handleIceCandidate);
    _callSocketClient.on('sdp_offer', _handleSdpOffer);
    _callSocketClient.on('sdp_answer', _handleSdpAnswer);
  }

  // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞
  Future<bool> initiateCall(String remoteUserId, CallType callType, {String? callerUsername}) async {
    try {
      debugPrint('üîî WebRTC: –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –∫ $remoteUserId (${callType.name})');
      
      if (_callState != CallState.idle) {
        debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ - —É–∂–µ –≤ –∑–≤–æ–Ω–∫–µ');
        return false;
      }

      // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      if (!await _requestPermissions(callType)) {
        debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ - –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è');
        return false;
      }

      _callType = callType;
      _remoteUserId = remoteUserId;
      _setCallState(CallState.calling);

      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
      await _createLocalStream();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ peer connection
      await _createPeerConnection();
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      if (_localStream != null) {
        for (final track in _localStream!.getTracks()) {
          _peerConnection!.addTrack(track, _localStream!);
        }
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ SDP offer
      final offer = await _peerConnection!.createOffer();
      await _peerConnection!.setLocalDescription(offer);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
      _callSocketClient.emit('initiate_call', {
        'remoteUserId': remoteUserId,
        'callType': callType.name,
        'sdp': offer.sdp,
        'type': offer.type,
        'callerUsername': callerUsername, // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∑–≤–æ–Ω—è—â–µ–≥–æ
      });

      // –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É - —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç!
      // _startCallTimer(); // –£–ë–ò–†–ê–ï–ú –≠–¢–£ –°–¢–†–û–ö–£!
      
      debugPrint('üîî WebRTC: –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (—Å—Ç–∞—Ç—É—Å: calling)');
      return true;
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞: $e');
      _setCallState(CallState.error);
      return false;
    }
  }

  // –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  Future<bool> acceptCall(String callId, CallType callType) async {
    try {
      debugPrint('üîî WebRTC: –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ $callId');
      debugPrint('üîî WebRTC: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${_callState.name}');
      debugPrint('üîî WebRTC: –¢–µ–∫—É—â–∏–π callId: $_currentCallId');
      debugPrint('üîî WebRTC: –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $_remoteUserId');
      
      if (_callState != CallState.incoming) {
        debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ - –Ω–µ –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫. –°—Ç–∞—Ç—É—Å: ${_callState.name}');
        return false;
      }

      // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      if (!await _requestPermissions(callType)) {
        debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ - –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è');
        return false;
      }

      _callType = callType;
      _currentCallId = callId;
      _setCallState(CallState.connected);

      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
      await _createLocalStream();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ peer connection
      await _createPeerConnection();
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      if (_localStream != null) {
        for (final track in _localStream!.getTracks()) {
          _peerConnection!.addTrack(track, _localStream!);
        }
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
      _callSocketClient.emit('accept_call', {
        'callId': callId,
      });

      debugPrint('üîî WebRTC: –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç');
      return true;
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞: $e');
      _setCallState(CallState.error);
      return false;
    }
  }

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  void rejectCall(String callId) {
    debugPrint('üîî WebRTC: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ $callId');
    
    _callSocketClient.emit('reject_call', {
      'callId': callId,
    });
    
    _resetCall();
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  void endCall() {
    debugPrint('üîî WebRTC: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞');
    
    if (_currentCallId != null) {
      _callSocketClient.emit('end_call', {
        'callId': _currentCallId,
      });
    }
    
    _resetCall();
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (–¥–ª—è –≤–∏–¥–µ–æ –∑–≤–æ–Ω–∫–æ–≤)
  Future<void> switchCamera() async {
    if (_callType == CallType.video && _localStream != null) {
      try {
        final videoTrack = _localStream!.getVideoTracks().first;
        if (videoTrack != null) {
          await Helper.switchCamera(videoTrack);
          debugPrint('üîî WebRTC: –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞');
        }
      } catch (e) {
        debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã: $e');
      }
    }
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  void toggleMicrophone() {
    if (_localStream != null) {
      final audioTrack = _localStream!.getAudioTracks().first;
      if (audioTrack != null) {
        audioTrack.enabled = !audioTrack.enabled;
        debugPrint('üîî WebRTC: –ú–∏–∫—Ä–æ—Ñ–æ–Ω ${audioTrack.enabled ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}');
        notifyListeners();
      }
    }
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
  void toggleCamera() {
    if (_callType == CallType.video && _localStream != null) {
      final videoTrack = _localStream!.getVideoTracks().first;
      if (videoTrack != null) {
        videoTrack.enabled = !videoTrack.enabled;
        debugPrint('üîî WebRTC: –ö–∞–º–µ—Ä–∞ ${videoTrack.enabled ? "–≤–∫–ª—é—á–µ–Ω–∞" : "–≤—ã–∫–ª—é—á–µ–Ω–∞"}');
        notifyListeners();
      }
    }
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  Future<bool> _requestPermissions(CallType callType) async {
    try {
      // –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—Å–µ–≥–¥–∞ –Ω—É–∂–µ–Ω
      var micPermission = await Permission.microphone.request();
      if (micPermission != PermissionStatus.granted) {
        debugPrint('üî• WebRTC: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω');
        return false;
      }

      // –ö–∞–º–µ—Ä–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ
      if (callType == CallType.video) {
        var cameraPermission = await Permission.camera.request();
        if (cameraPermission != PermissionStatus.granted) {
          debugPrint('üî• WebRTC: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–∞–º–µ—Ä—É');
          return false;
        }
      }

      debugPrint('üîî WebRTC: –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
      return true;
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
      return false;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
  Future<void> _createLocalStream() async {
    try {
      _localStream = await createLocalMediaStream('local_stream');
      debugPrint('üîî WebRTC: –õ–æ–∫–∞–ª—å–Ω—ã–π –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω');
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞: $e');
      rethrow;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ peer connection
  Future<void> _createPeerConnection() async {
    try {
      _peerConnection = await createPeerConnection(_rtcConfiguration);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      _peerConnection!.onIceCandidate = (candidate) {
        if (candidate != null) {
          debugPrint('üîî WebRTC: ICE –∫–∞–Ω–¥–∏–¥–∞—Ç: ${candidate.candidate}');
          _callSocketClient.emit('ice_candidate', {
            'callId': _currentCallId,
            'candidate': candidate.toMap(),
          });
        }
      };

      _peerConnection!.onConnectionState = (state) {
        debugPrint('üîî WebRTC: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $state');
        if (state == RTCPeerConnectionState.RTCPeerConnectionStateConnected) {
          debugPrint('üîî WebRTC: WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
      };

      _peerConnection!.onTrack = (event) {
        if (event.streams.isNotEmpty) {
          _remoteStream = event.streams[0];
          debugPrint('üîî WebRTC: –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω');
          notifyListeners();
        }
      };

      debugPrint('üîî WebRTC: Peer connection —Å–æ–∑–¥–∞–Ω');
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è peer connection: $e');
      rethrow;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  void _handleIncomingCall(dynamic data) async {
    try {
      final callId = data['callId'];
      final remoteUserId = data['remoteUserId'];
      final callType = CallType.values.firstWhere(
        (e) => e.name == data['callType'],
        orElse: () => CallType.audio,
      );
      final remoteUsername = data['callerUsername'] ?? 'Unknown User'; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–≤–æ–Ω—è—â–µ–≥–æ

      debugPrint('üîî WebRTC: –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç $remoteUserId (${callType.name})');
      debugPrint('üîî WebRTC: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${_callState.name}');
      
      _currentCallId = callId;
      _remoteUserId = remoteUserId;
      _callType = callType;
      _remoteUsername = remoteUsername; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
      _setCallState(CallState.incoming);
      
      debugPrint('üîî WebRTC: –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${_callState.name}');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
      if (_onIncomingCall != null) {
        debugPrint('üîî WebRTC: –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ');
        _onIncomingCall!({
          'callId': callId,
          'remoteUserId': remoteUserId,
          'callType': callType.name,
          'remoteUsername': remoteUsername,
        });
      } else {
        debugPrint('‚ö†Ô∏è WebRTC: Callback –¥–ª—è UI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞: $e');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞
  void _handleCallAccepted(dynamic data) async {
    try {
      final callId = data['callId'];
      
      debugPrint('üîî WebRTC: –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞: $callId');
      debugPrint('üîî WebRTC: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${_callState.name}');
      debugPrint('üîî WebRTC: –¢–µ–∫—É—â–∏–π callId: $_currentCallId');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –∑–≤–æ–Ω–æ–∫ (–ª–∏–±–æ –∫–∞–∫ –∑–≤–æ–Ω—è—â–∏–π, –ª–∏–±–æ –∫–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π)
      if (_currentCallId == callId || _remoteUserId != null) {
        debugPrint('üîî WebRTC: –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        _setCallState(CallState.connected);
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç!
        _startCallTimer();
        
        // TODO: –ü–æ–∫–∞–∑–∞—Ç—å ActiveCallScreen –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        // –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Callback –∏–ª–∏ Stream
        debugPrint('üîî WebRTC: –ó–≤–æ–Ω–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω - –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å ActiveCallScreen');
      } else {
        debugPrint('‚ö†Ô∏è WebRTC: –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∑–≤–æ–Ω–∫—É');
      }
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞: $e');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
  void _handleCallRejected(dynamic data) async {
    try {
      final callId = data['callId'];
      
      debugPrint('üîî WebRTC: –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞: $callId');
      debugPrint('üîî WebRTC: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${_callState.name}');
      debugPrint('üîî WebRTC: –¢–µ–∫—É—â–∏–π callId: $_currentCallId');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –∑–≤–æ–Ω–æ–∫ (–ª–∏–±–æ –∫–∞–∫ –∑–≤–æ–Ω—è—â–∏–π, –ª–∏–±–æ –∫–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π)
      if (_currentCallId == callId || _remoteUserId != null) {
        debugPrint('üîî WebRTC: –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        _resetCall();
      } else {
        debugPrint('‚ö†Ô∏è WebRTC: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∑–≤–æ–Ω–∫—É');
      }
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: $e');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
  void _handleCallEnded(dynamic data) async {
    try {
      final callId = data['callId'];
      
      debugPrint('üîî WebRTC: –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞: $callId');
      debugPrint('üîî WebRTC: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${_callState.name}');
      debugPrint('üîî WebRTC: –¢–µ–∫—É—â–∏–π callId: $_currentCallId');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –∑–≤–æ–Ω–æ–∫ (–ª–∏–±–æ –∫–∞–∫ –∑–≤–æ–Ω—è—â–∏–π, –ª–∏–±–æ –∫–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π)
      if (_currentCallId == callId || _remoteUserId != null) {
        debugPrint('üîî WebRTC: –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        _resetCall();
      } else {
        debugPrint('‚ö†Ô∏è WebRTC: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∑–≤–æ–Ω–∫—É');
      }
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: $e');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ SDP offer
  void _handleSdpOffer(dynamic data) async {
    try {
      final sdp = RTCSessionDescription(
        data['sdp'],
        data['type'],
      );

      if (_peerConnection != null) {
        await _peerConnection!.setRemoteDescription(sdp);
        
        final answer = await _peerConnection!.createAnswer();
        await _peerConnection!.setLocalDescription(answer);
        
        _callSocketClient.emit('sdp_answer', {
          'callId': _currentCallId,
          'sdp': answer.sdp,
          'type': answer.type,
        });
        
        debugPrint('üîî WebRTC: SDP answer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      }
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDP offer: $e');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ SDP answer
  void _handleSdpAnswer(dynamic data) async {
    try {
      final sdp = RTCSessionDescription(
        data['sdp'],
        data['type'],
      );

      if (_peerConnection != null) {
        await _peerConnection!.setRemoteDescription(sdp);
        debugPrint('üîî WebRTC: SDP answer –ø–æ–ª—É—á–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDP answer: $e');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  void _handleIceCandidate(dynamic data) async {
    try {
      final candidate = RTCIceCandidate(
        data['candidate']['candidate'],
        data['candidate']['sdpMid'],
        data['candidate']['sdpMLineIndex'],
      );

      if (_peerConnection != null) {
        await _peerConnection!.addCandidate(candidate);
        debugPrint('üîî WebRTC: ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
      }
      
    } catch (e) {
      debugPrint('üî• WebRTC: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: $e');
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∑–≤–æ–Ω–∫–∞
  void _startCallTimer() {
    _callTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      // –õ–æ–≥–∏–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∑–≤–æ–Ω–∫–∞
    });
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∑–≤–æ–Ω–∫–∞
  void _stopCallTimer() {
    _callTimer?.cancel();
    _callTimer = null;
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤–æ–Ω–∫–∞
  void _resetCall() {
    _stopCallTimer();
    _iceGatheringTimer?.cancel();
    
    _localStream?.dispose();
    _remoteStream?.dispose();
    _peerConnection?.dispose();
    
    _localStream = null;
    _remoteStream = null;
    _peerConnection = null;
    _currentCallId = null;
    _remoteUserId = null;
    _remoteUsername = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–º—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    _setCallState(CallState.idle);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤–æ–Ω–∫–∞
  void _setCallState(CallState state) {
    _callState = state;
    notifyListeners();
  }

  @override
  void dispose() {
    _resetCall();
    super.dispose();
  }
}
