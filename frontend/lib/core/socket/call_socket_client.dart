import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:flutter/foundation.dart';

/// WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞ –∑–≤–æ–Ω–∫–æ–≤
/// –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É namespace /calls
class CallSocketClient {
  IO.Socket? _socket;
  String? _token;
  bool _isConnected = false;

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ namespace –∑–≤–æ–Ω–∫–æ–≤
  void connect(String token) {
    debugPrint('üîî CallSocket: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ namespace /calls —Å —Ç–æ–∫–µ–Ω–æ–º: ${token.substring(0, 10)}...');
    
    if (_isConnected) {
      debugPrint('üîî CallSocket: –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ namespace /calls');
      return;
    }

    if (token.isEmpty) {
      debugPrint('üî• CallSocket: –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω');
      return;
    }

    _token = token;
    
    try {
      debugPrint('üîî CallSocket: –°–æ–∑–¥–∞—é Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ http://localhost:3000/calls');
      
      _socket = IO.io('http://localhost:3000/calls', <String, dynamic>{
        'transports': ['websocket'],
        'autoConnect': true,
        'auth': {
          'token': token,
        },
        'forceNew': true, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        'reconnection': true,
        'reconnectionAttempts': 5,
        'reconnectionDelay': 1000,
      });

      debugPrint('üîî CallSocket: Socket.IO –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π');
      _setupEventListeners();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (_socket!.connected) {
        _isConnected = true;
        debugPrint('üîî CallSocket: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ namespace /calls —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)');
      } else {
        debugPrint('üîî CallSocket: Socket.IO —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
      }
      
    } catch (e) {
      debugPrint('üî• CallSocket: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      _isConnected = false;
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
  void _setupEventListeners() {
    if (_socket == null) {
      debugPrint('üî• CallSocket: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏ - socket == null');
      return;
    }

    debugPrint('üîî CallSocket: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π Socket.IO');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    _socket!.onConnect((_) {
      debugPrint('üîî CallSocket: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ namespace /calls');
      _isConnected = true;
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    _socket!.onDisconnect((_) {
      debugPrint('üîî CallSocket: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç namespace /calls');
      _isConnected = false;
    });

    // –û—à–∏–±–∫–∏
    _socket!.onError((error) {
      debugPrint('üî• CallSocket: –û—à–∏–±–∫–∞ Socket.IO: $error');
    });

    // –°–æ–±—ã—Ç–∏–µ connect_error
    _socket!.onConnectError((error) {
      debugPrint('üî• CallSocket: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $error');
    });

    // –°–æ–±—ã—Ç–∏–µ reconnect
    _socket!.onReconnect((_) {
      debugPrint('üîî CallSocket: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ namespace /calls');
      _isConnected = true;
    });

    // –°–æ–±—ã—Ç–∏–µ reconnect_error
    _socket!.onReconnectError((error) {
      debugPrint('üî• CallSocket: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $error');
    });

    // –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
    _socket!.on('incoming_call', (data) {
      debugPrint('üîî CallSocket: –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫: $data');
      // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
    _socket!.on('call_status_changed', (data) {
      debugPrint('üîî CallSocket: –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è: $data');
      // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
    _socket!.on('call_ended', (data) {
      debugPrint('üîî CallSocket: –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: $data');
      // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –∑–≤–æ–Ω–∫–∞
    _socket!.on('joined_call_room', (data) {
      debugPrint('üîî CallSocket: –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ –∑–≤–æ–Ω–∫–∞: $data');
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –∑–≤–æ–Ω–∫–∞
    _socket!.on('left_call_room', (data) {
      debugPrint('üîî CallSocket: –ü–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É –∑–≤–æ–Ω–∫–∞: $data');
    });

    debugPrint('üîî CallSocket: –í—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
  void joinCallRoom(String callId) {
    if (!_isConnected || _socket == null) {
      debugPrint('üî• CallSocket: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ namespace /calls');
      return;
    }

    debugPrint('üîî CallSocket: –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ –∑–≤–æ–Ω–∫–∞: $callId');
    _socket!.emit('join_call_room', {'callId': callId});
  }

  /// –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –∑–≤–æ–Ω–∫–∞
  void leaveCallRoom(String callId) {
    if (!_isConnected || _socket == null) {
      debugPrint('üî• CallSocket: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ namespace /calls');
      return;
    }

    debugPrint('üîî CallSocket: –ü–æ–∫–∏–¥–∞—é –∫–æ–º–Ω–∞—Ç—É –∑–≤–æ–Ω–∫–∞: $callId');
    _socket!.emit('leave_call_room', {'callId': callId});
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ SDP Offer
  void sendSdpOffer(String callId, String sdp) {
    if (!_isConnected || _socket == null) {
      debugPrint('üî• CallSocket: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ namespace /calls');
      return;
    }

    debugPrint('üîî CallSocket: –û—Ç–ø—Ä–∞–≤–ª—è—é SDP Offer –¥–ª—è –∑–≤–æ–Ω–∫–∞: $callId');
    _socket!.emit('sdp_offer', {
      'callId': callId,
      'sdp': sdp,
    });
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ SDP Answer
  void sendSdpAnswer(String callId, String sdp) {
    if (!_isConnected || _socket == null) {
      debugPrint('üî• CallSocket: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ namespace /calls');
      return;
    }

    debugPrint('üîî CallSocket: –û—Ç–ø—Ä–∞–≤–ª—è—é SDP Answer –¥–ª—è –∑–≤–æ–Ω–∫–∞: $callId');
    _socket!.emit('sdp_answer', {
      'callId': callId,
      'sdp': sdp,
    });
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ ICE Candidate
  void sendIceCandidate(String callId, String candidate) {
    if (!_isConnected || _socket == null) {
      debugPrint('üî• CallSocket: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ namespace /calls');
      return;
    }

    debugPrint('üîî CallSocket: –û—Ç–ø—Ä–∞–≤–ª—è—é ICE Candidate –¥–ª—è –∑–≤–æ–Ω–∫–∞: $callId');
    _socket!.emit('ice_candidate', {
      'callId': callId,
      'candidate': candidate,
    });
  }

  /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç namespace –∑–≤–æ–Ω–∫–æ–≤
  void disconnect() {
    if (_socket != null) {
      _socket!.disconnect();
      _socket = null;
      _isConnected = false;
      _token = null;
      debugPrint('üîî CallSocket: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç namespace /calls');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  bool get isConnected => _isConnected;

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
  String? get token => _token;

  /// –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–ø—Ä–∏ logout)
  void clearToken() {
    _token = null;
    debugPrint('üîî CallSocket: –¢–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω');
  }

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è WebRTC —Å–µ—Ä–≤–∏—Å–∞)
  void on(String event, Function(dynamic) handler) {
    if (_socket != null) {
      _socket!.on(event, handler);
      debugPrint('üîî CallSocket: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: $event');
    } else {
      debugPrint('üî• CallSocket: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ $event - socket == null');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π (–¥–ª—è WebRTC —Å–µ—Ä–≤–∏—Å–∞)
  void emit(String event, [dynamic data]) {
    if (_isConnected && _socket != null) {
      _socket!.emit(event, data);
      debugPrint('üîî CallSocket: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: $event —Å –¥–∞–Ω–Ω—ã–º–∏: $data');
    } else {
      debugPrint('üî• CallSocket: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å $event - –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
  }
}
